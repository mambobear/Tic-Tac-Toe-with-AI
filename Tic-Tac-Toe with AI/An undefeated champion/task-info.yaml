type: edu
custom_name: stage5
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/Grid.java
  visible: false
  text: |-
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.stream.Collectors;
    import java.util.stream.Stream;

    public class Grid {

        private final CellState[][] grid;

        private Grid() {
            grid = new CellState[3][3];
        }

        public static Grid fromLine(String line) {
            Grid grid = new Grid();

            if (line.length() != 9) {
                throw new WrongAnswer("Wrong input length. Expected 9.\nFound " + line.length());
            }

            for (int i = 0; i < line.length(); i++) {
                grid.grid[i / 3][i % 3] = CellState.get(line.charAt(i));
            }

            return grid;
        }

        public static Grid fromOutput(String stringField) {
            return fromOutput(stringField, 1);
        }

        public static Grid fromOutput(String stringField, int fieldNumber) {

            Grid grid = new Grid();

            List<String> fieldLines = Arrays.stream(stringField.split("\n"))
                .map(String::strip)
                .filter(line -> line.startsWith("|") && line.endsWith("|"))
                .collect(Collectors.toList());

            if (fieldLines.size() < 3 * fieldNumber) {
                throw new WrongAnswer("Expected not less than " + fieldNumber + " grids in the output!\n" +
                    "Make sure you print the game grids in the correct format!");
            }

            fieldLines = fieldLines.subList(fieldNumber * 3 - 3, fieldNumber * 3);

            for (int i = 0; i < fieldLines.size(); i++) {
                String line = fieldLines.get(i);
                if (line.length() != 9) {
                    throw new WrongAnswer("Can't parse the game field. The following line has wrong length:\n" + line);
                }
                for (int j = 0; j < 3; j++) {
                    grid.grid[i][j] = CellState.get(line.charAt(j * 2 + 2));
                }
            }

            return grid;
        }

        public static List<Grid> allGridsFromOutput(String stringField) {

            List<Grid> gridList = new ArrayList<>();

            List<String> fieldLines = Arrays.stream(stringField.split("\n"))
                .map(String::strip)
                .filter(line -> line.startsWith("|") && line.endsWith("|"))
                .collect(Collectors.toList());

            if (fieldLines.size() % 3 != 0) {
                throw new WrongAnswer("Wrong grid output format! Each grid should contain 3 lines that starts and ends with '|' symbol!");
            }

            for (int i = 0; i < fieldLines.size() / 3; i++) {
                List<String> gridLines = fieldLines.subList(i * 3, i * 3 + 3);

                Grid grid = new Grid();

                for (int j = 0; j < gridLines.size(); j++) {
                    String line = gridLines.get(j);
                    if (line.length() != 9) {
                        throw new WrongAnswer("Can't parse the game field. The following line has wrong length:\n" + line);
                    }
                    for (int k = 0; k < 3; k++) {
                        grid.grid[j][k] = CellState.get(line.charAt(k * 2 + 2));
                    }
                }

                gridList.add(grid);
            }

            return gridList;
        }

        public static Position getMove(Grid from, Grid to) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (from.grid[i][j] != to.grid[i][j]) {
                        return new Position(i, j);
                    }
                }
            }
            throw new WrongAnswer("After making a move the grid was the same!");
        }

        public boolean isWin(CellState player) {
            for (int i = 0; i < 3; i++) {
                if (grid[i][0] == grid[i][1] && grid[i][1] == grid[i][2] && grid[i][2] == player) {
                    return true;
                }
            }

            for (int i = 0; i < 3; i++) {
                if (grid[0][i] == grid[1][i] && grid[1][i] == grid[2][i] && grid[2][i] == player) {
                    return true;
                }
            }

            return grid[0][0] == grid[1][1] && grid[1][1] == grid[2][2] && grid[2][2] == player
                || grid[2][0] == grid[1][1] && grid[1][1] == grid[0][2] && grid[0][2] == player;
        }

        public boolean hasEmptyCells() {
            return Arrays.stream(grid)
                .flatMap(Stream::of)
                .anyMatch(cell -> cell == CellState.EMPTY);
        }

        public int getNumOfEmptyCells() {
            return (int) Arrays.stream(grid)
                .flatMap(Stream::of)
                .filter(cell -> cell == CellState.EMPTY).count();
        }

        public GameState getGameState() {
            if (isWin(CellState.X)) return GameState.X_WIN;
            if (isWin(CellState.O)) return GameState.O_WIN;
            if (hasEmptyCells()) return GameState.NOT_FINISHED;
            else return GameState.DRAW;
        }

        public CellState[][] getGrid() {
            return grid;
        }

        public void setCell(int x, int y, CellState cellState) {
            grid[x][y] = cellState;
        }

        public boolean isCorrectNextGrid(Grid grid) {
            return getNumOfEmptyCells() - grid.getNumOfEmptyCells() == 1;
        }

        public boolean isValidGrid() {

            int numOfX = (int) Arrays.stream(grid)
                .flatMap(Stream::of)
                .filter(cell -> cell == CellState.X).count();
            int numOfO = (int) Arrays.stream(grid)
                .flatMap(Stream::of)
                .filter(cell -> cell == CellState.O).count();

            return Math.abs(numOfO - numOfX) <= 1;
        }

        public static void checkGridSequence(List<Grid> grids) {
            if (grids.size() <= 1) {
                return;
            }

            for (int i = 1; i < grids.size(); i++) {
                Grid prevGrid = grids.get(i - 1);
                Grid grid = grids.get(i);
                if (!grid.isValidGrid()) {
                    throw new WrongAnswer("Impossible grid was printed! The difference between Os and Xs in the grid is greater than 1:\n" + grid);
                }
                if (!prevGrid.isCorrectNextGrid(grid)) {
                    throw new WrongAnswer("After making a move on grid\n" + prevGrid + "\n it can't become\n" + grid);
                }
            }

            Grid lastGrid = grids.get(grids.size() - 1);

            if (lastGrid.getGameState() == GameState.NOT_FINISHED) {
                throw new WrongAnswer("Last grid is not terminal!\n" + lastGrid);
            }
        }

        @Override
        public String toString() {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("---------").append("\n");
            for (int i = 0; i < 3; i++) {
                stringBuilder.append("| ").append(grid[i][0]).append(" ").append(grid[i][1]).append(" ").append(grid[i][2]).append(" |\n");
            }
            stringBuilder.append("---------");
            return stringBuilder.toString();
        }

        private String toLine() {
            StringBuilder result = new StringBuilder();
            for (int i = 0; i < 9; i++) {
                result.append(grid[i / 3][i % 3]);
            }
            return result.toString();
        }

        @Override
        public boolean equals(Object o) {
            if (!(o instanceof Grid)) {
                return false;
            }

            Grid grid = (Grid) o;

            for (int i = 0; i < 9; i++) {
                if (grid.grid[i / 3][i % 3] != this.grid[i / 3][i % 3]) {
                    return false;
                }
            }
            return true;
        }

        public Grid copy() {
            return Grid.fromLine(toLine());
        }
    }

    enum GameState {

        X_WIN, O_WIN, DRAW, NOT_FINISHED

    }

    enum CellState {

        X("X"), O("O"), EMPTY(" ");

        String value;

        CellState(String value) {
            this.value = value;
        }

        static CellState get(char symbol) {
            switch (symbol) {
                case 'X':
                    return X;
                case 'O':
                    return O;
                case ' ':
                case '_':
                    return EMPTY;
                default:
                    throw new WrongAnswer("Bad symbol '" + symbol + "' in the game grid");
            }
        }

        static CellState getOpponent(CellState player) {
            if (player == X) {
                return O;
            } else {
                return X;
            }
        }

        @Override
        public String toString() {
            return value;
        }
    }
  learner_created: false
- name: test/Minimax.java
  visible: false
  text: |+
    import java.util.ArrayList;
    import java.util.List;

    public class Minimax {

        private static Position bestPosition;

        public static Position getMove(Grid grid, CellState player) {

            int bestScore = Integer.MIN_VALUE;

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (grid.getGrid()[i][j] == CellState.EMPTY) {
                        grid.setCell(i, j, player);
                        int score = minimax(grid, CellState.getOpponent(player), false, player, 1);
                        grid.setCell(i, j, CellState.EMPTY);
                        if (score > bestScore) {
                            bestScore = score;
                            bestPosition = new Position(i, j);
                        }
                    }
                }
            }

            return bestPosition;
        }

        private static int minimax(Grid grid, CellState player, boolean isMaximize, CellState startPlayer, int depth) {

            switch (grid.getGameState()) {
                case X_WIN:
                    return startPlayer == CellState.X ? 10 - depth : depth - 10;
                case O_WIN:
                    return startPlayer == CellState.O ? 10 - depth : depth - 10;
                case DRAW:
                    return 0;
            }

            int bestScore = isMaximize ? Integer.MIN_VALUE : Integer.MAX_VALUE;

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (grid.getGrid()[i][j] == CellState.EMPTY) {
                        grid.setCell(i, j, player);
                        int score = minimax(grid, CellState.getOpponent(player), !isMaximize, startPlayer, depth + 1);
                        grid.setCell(i, j, CellState.EMPTY);
                        bestScore = isMaximize ? Math.max(bestScore, score) : Math.min(bestScore, score);
                    }
                }
            }

            return bestScore;
        }

        public static List<Position> getAvailablePositions(Grid grid, CellState player) {

            List<Position> positions = new ArrayList<>();

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (grid.getGrid()[i][j] == CellState.EMPTY) {
                        grid.setCell(i, j, player);
                        int score = minimax(grid, CellState.getOpponent(player), false, player, 1);
                        if (score >= 0) {
                            positions.add(new Position(i, j));
                        }
                        grid.setCell(i, j, CellState.EMPTY);
                    }
                }
            }

            return positions;
        }
    }

    class Position {

        int x;
        int y;

        public Position(int x, int y) {
            this.x = x;
            this.y = y;
        }

        @Override
        public String toString() {
            return x + " " + y;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Position position = (Position) o;
            return x == position.x &&
                y == position.y;
        }
    }



  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 0)
        CheckResult testBadParameters() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            output = program.execute("start easy");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            program.execute("exit");

            if (!program.isFinished()) {
                return CheckResult.wrong("After entering 'exit' command you should stop the program!");
            }

            return CheckResult.correct();
        }


        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            program.start();

            String output = program.execute("start user easy");

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }

            if (!output.toLowerCase().contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }

        @DynamicTest(order = 6)
        CheckResult checkEasyVsEasy() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start easy easy");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 10, order = 7)
        CheckResult checkMediumAi() {
            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            }
            program.stop();

            return CheckResult.correct();
        }

        @DynamicTest(order = 8, repeat = 5)
        CheckResult checkMediumVsMedium() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start medium medium");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        boolean isMediumNotMovingLikeHard = false;

        @DynamicTest(repeat = 30, order = 9)
        CheckResult checkMediumNotMovingLikeHard() {

            if (isMediumNotMovingLikeHard) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid userMoveGrid = Grid.fromOutput(output, 1);
            Grid mediumMoveGrid = Grid.fromOutput(output, 2);

            Position mediumMove = Grid.getMove(userMoveGrid, mediumMoveGrid);

            List<Position> minimaxCorrectPositions = Minimax.getAvailablePositions(userMoveGrid, CellState.O);

            if (!minimaxCorrectPositions.contains(mediumMove)) {
                isMediumNotMovingLikeHard = true;
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 10)
        CheckResult checkMediumNotMovingLikeHardAfter() {
            if (!isMediumNotMovingLikeHard) {
                return CheckResult.wrong("Looks like Medium level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }

        @DynamicTest(order = 11)
        CheckResult checkHardAi() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start user hard");
            Grid grid = Grid.fromOutput(output);
            Position nextMove = Minimax.getMove(grid, CellState.X);
            output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

            while (!output.toLowerCase().contains("win") && !output.toLowerCase().contains("draw")) {
                Grid gridAfterUserMove = Grid.fromOutput(output);
                Grid gridAfterAiMove = Grid.fromOutput(output, 2);
                Position aiMove = Grid.getMove(gridAfterUserMove, gridAfterAiMove);

                List<Position> correctMinimaxMovePositions = Minimax.getAvailablePositions(gridAfterUserMove, CellState.O);
                if (!correctMinimaxMovePositions.contains(aiMove)) {
                    return CheckResult.wrong("Your minimax algorithm is wrong! It chooses wrong positions to make a move!");
                }

                nextMove = Minimax.getMove(gridAfterAiMove, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 5, order = 12)
        CheckResult checkHardVsHard() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start hard hard");

            if (!output.toLowerCase().contains("draw")) {
                return CheckResult.wrong("The result of the game between minimax algorithms should be always 'Draw'!\n" +
                    "Make sure your output contains 'Draw'.");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Human.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Scanner;

    class Human extends Player {
        Human(char mark) {
            super(mark);
        }

        public Game.Status makeMove() {
            Scanner scanner = new Scanner(System.in);
            while (true) {
                System.out.print("Enter the coordinates: ");
                int row;
                int col;

                String[] input = scanner.nextLine().split("\\s+");
                String rowStr = input[0];
                try {
                    row = getCoordinate(rowStr);
                } catch (IllegalArgumentException e) {
                    System.out.println(e.getMessage());
                    continue;
                }

                String colStr = (input.length == 1) ? scanner.next() : input[1];

                try {
                    col = getCoordinate(colStr);
                } catch (IllegalArgumentException e) {
                    System.out.println(e.getMessage());
                    continue;
                }
                if (!this.grid.isCellEmpty(row - 1, col - 1)) {
                    System.out.println("This cell is occupied! Choose another one!");
                    continue;
                }

                this.grid.markCell(row - 1, col - 1, this.mark);
                return this.grid.statusAfterMove(row - 1, col - 1);
            }
        }

        private int getCoordinate(String coordStr) {
            try {
                int coord = Integer.parseInt(coordStr);
                if (coord < 1 || coord > 3) {
                    throw new IllegalArgumentException("Coordinates should be from 1 to 3!");
                }
                return  coord;
            } catch (NumberFormatException e) {
                throw new IllegalArgumentException("You should enter numbers!");
            }
        }
    }
  learner_created: true
- name: src/tictactoe/Grid.java
  visible: true
  text: |
    package tictactoe;

    class Grid {
        static class LineStats {

            private int numX;
            private int numO;

            LineStats() {
                this.numX = 0;
                this.numO = 0;
            }

            private void incX() {
                if (this.numX < 3) this.numX++;
            }

            private void incO() {
                if (this.numO < 3) this.numO++;
            }

            public void increment(char mark) {
                if (mark == 'X') this.incX();
                if (mark == 'O') this.incO();
            }

            public int numFor(char player) {
                assert player == 'X' || player == 'O';
                if (player == 'X') return numX;
                else return numO;
            }
        }

        private final char Empty = ' ';

        private final int ROWS = 0;
        private final int COLUMNS = 1;

        private final int SIZE = 3;
        private final char[][] grid = {
                {Empty, Empty, Empty},
                {Empty, Empty, Empty},
                {Empty, Empty, Empty},
        };

        private int nEmptyCells = SIZE * SIZE;

        LineStats[][] rowAndColumnCounts = new LineStats[2][SIZE];
        LineStats mainDiagonal = new LineStats();
        LineStats antiDiagonal = new LineStats();

        Grid() {
            for (int i = 0; i < 2; i++) {
                for (int j = 0; j < SIZE; j++) {
                    this.rowAndColumnCounts[i][j] = new LineStats();
                }
            }
        }

        // Public methods
        public String toString() {
            StringBuilder strb = new StringBuilder();
            strb.append("---------\n");
            for (char[] row : grid) {
                strb.append("| ");
                for (char c : row) {
                    strb.append(c).append(" ");
                }
                strb.append("|\n");
            }
            strb.append("---------\n");
            return strb.toString();
        }

        public Game.Move winningMoveFor(char player, char opponent) {

            LineStats stats;
            for (int i = 0; i < SIZE; i++) {
                stats = rowAndColumnCounts[ROWS][i];
                if (stats.numFor(player) == 2 && stats.numFor(opponent) == 0) {
                    for (int col = 0; col < SIZE; col++) {
                        if (this.grid[i][col] == Empty) return new Game.Move(i, col);
                    }
                }
                stats = rowAndColumnCounts[COLUMNS][i];
                if (stats.numFor(player) == 2 && stats.numFor(opponent) == 0) {
                    for (int row = 0; row < SIZE; row++) {
                        if (this.grid[row][i] == Empty) return new Game.Move(row, i);
                    }
                }
            }

            if (mainDiagonal.numFor(player) == 2 && mainDiagonal.numFor(opponent) == 0) {
                for (int i = 0; i < SIZE; i++) {
                    if (this.grid[i][i] == Empty) return new Game.Move(i, i);
                }
            }

            if (antiDiagonal.numFor(player) == 2 && antiDiagonal.numFor(opponent) == 0) {
                for (int i = 0; i < SIZE; i++) {
                    if (this.grid[i][SIZE - 1 - i] == Empty) return new Game.Move(i, SIZE - 1 - i);
                }
            }

            return null;
        }

        public void markCell(int row, int col, char mark) {
            grid[row][col] = mark;
            this.nEmptyCells--;
            rowAndColumnCounts[ROWS][row].increment(mark);
            rowAndColumnCounts[COLUMNS][col].increment(mark);
            if (row == col) mainDiagonal.increment(mark);
            if (row + col == SIZE - 1) antiDiagonal.increment(mark);
        }

        public boolean isCellEmpty(int row, int col) {
            return this.grid[row][col] == Empty;
        }

        Game.Status statusAfterMove(int row, int col) {
            if (hasLineAt(row, col)) return (this.grid[row][col] == 'X') ? Game.Status.X_WINS : Game.Status.O_WINS;
            if (this.nEmptyCells == 0) return Game.Status.DRAW;
            return Game.Status.NOT_FINISHED;
        }

        // Private methods
        private boolean hasLineAt(int row, int col) {
            char player = this.grid[row][col];
            return hasRowAt(row, player) || hasColumnAt(col, player) || hasDiagonalAt(row, col, player);
        }

        private boolean hasDiagonalAt(int row, int col, char player) {
            if (row == col) {
                if (player == 'X') return mainDiagonal.numX == SIZE;
                if (player == 'O') return mainDiagonal.numO == SIZE;
            }

            if (row + col == SIZE - 1) {
                if (player == 'X') return antiDiagonal.numX == SIZE;
                if (player == 'O') return antiDiagonal.numO == SIZE;
            }

            return false;
        }

        private boolean hasColumnAt(int col, char player) {
            if (player == 'X') {
                return this.rowAndColumnCounts[COLUMNS][col].numO == SIZE;
            }
            if (player == 'O') {
                return this.rowAndColumnCounts[COLUMNS][col].numO == SIZE;
            }
            return false;
        }

        private boolean hasRowAt(int row, char player) {
            if (player == 'X') {
                return this.rowAndColumnCounts[ROWS][row].numX == SIZE;
            }
            if (player == 'O') {
                return this.rowAndColumnCounts[ROWS][row].numO == SIZE;
            }
            return false;
        }
    }
  learner_created: true
- name: src/tictactoe/Player.java
  visible: true
  text: |
    package tictactoe;

    abstract class Player {

        final char mark;
        Grid grid = null;

        abstract Game.Status makeMove();

        Player(char mark) {
            this.mark = mark;
        }

        public void setGrid(Grid grid) {
            this.grid = grid;
        }

        public char opponent(char mark) {
            return mark == 'X' ? 'O' : 'X';
        }

        Game.Move winningMoveFor(char mark) {
            return this.grid.winningMoveFor(mark, opponent(mark));
        }
    }

    class PlayerCreator {
        public static Player createPlayer(String playerType, char mark) {
            if ("easy".equals(playerType)) {
                return new Computer(mark, Computer.ComputerLevel.EASY);
            }

            if ("medium".equals(playerType)) {
                return new Computer(mark, Computer.ComputerLevel.MEDIUM);
            }

            if ("hard".equals(playerType)) {
                return new Computer(mark, Computer.ComputerLevel.HARD);
            }

            if ("user".equals(playerType)) {
                return new Human(mark);
            }
            return null;
        }
    }
  learner_created: true
- name: src/tictactoe/Computer.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Random;

    class Computer extends Player {

        enum ComputerLevel {
            EASY, MEDIUM, HARD
        }

        ComputerLevel level;

        Computer(char mark, ComputerLevel level) {
            super(mark);
            this.level = level;
        }

        public Game.Status makeMove() {
            Game.Move move = null;
            switch (this.level) {
                case EASY:
                    System.out.println("Making move level \"easy\"");
                    move = findEasyMove();
                    break;
                case MEDIUM:
                    System.out.println("Making move level \"medium\"");
                    move = findMediumMove();
                    break;
                case HARD:
                    System.out.println("Making move level \"hard\"");
                    move = findHardMove();
                    break;
            }
            assert move != null;
            this.grid.markCell(move.getRow(), move.getCol(), this.mark);
            return this.grid.statusAfterMove(move.getRow(), move.getCol());
        }

        private Game.Move findHardMove() {
            return null;
        }

        private Game.Move findMediumMove() {
            Game.Move move = winningMoveFor(this.mark);
            if (move != null) return move;

            move = winningMoveFor(this.opponent(this.mark));
            if (move != null) return move;

            return findEasyMove();
        }

        private Game.Move findEasyMove() {
            Random rand = new Random(System.currentTimeMillis());
            while (true) {
                int row = rand.nextInt(3);
                int col = rand.nextInt(3);
                if (!this.grid.isCellEmpty(row, col)) continue;

                return new Game.Move(row, col);
            }
        }
    }
  learner_created: true
- name: src/tictactoe/Game.java
  visible: true
  text: |
    package tictactoe;

    import java.util.ArrayList;

    class Game {

        static final ArrayList<String> playerTypes = new ArrayList<>();

        static {
            playerTypes.add("easy");
            playerTypes.add("medium");
            playerTypes.add("hard");
            playerTypes.add("user");
        }

        enum Status {
            NOT_FINISHED, DRAW, X_WINS, O_WINS
        }

        private final Grid grid;

        private Status status = Status.NOT_FINISHED;

        private final Player[] players;
        private int currentPlayerIndex = 0;

        Game(String player1Name, String player2Name) {

            Player playerX = PlayerCreator.createPlayer(player1Name, 'X');
            Player playerO = PlayerCreator.createPlayer(player2Name, 'O');

            this.grid = new Grid();

            assert playerX != null;
            assert playerO != null;
            playerX.setGrid(this.grid);
            playerO.setGrid(this.grid);

            this.players = new Player[]{playerX, playerO};
        }

        public void start() {

            while (this.status == Status.NOT_FINISHED) {
                this.printGrid();
                this.makeMove();
                this.switchPlayers();
            }
            this.printGameStatus();
        }

        public void printGrid() {
            System.out.println(this.grid);
        }

        public void makeMove() {
            assert this.status == Status.NOT_FINISHED;
            this.status = this.currentPlayer().makeMove();
        }

        void switchPlayers() {
            this.currentPlayerIndex = (this.currentPlayerIndex + 1) % 2;
        }

        private Player currentPlayer() {
            return this.players[this.currentPlayerIndex];
        }

        void printGameStatus() {
            printGrid();
            switch (this.status) {
                case DRAW:
                    System.out.println("Draw");
                    break;
                case O_WINS:
                    System.out.println("O wins");
                    break;
                case X_WINS:
                    System.out.println("X wins");
                    break;
                case NOT_FINISHED:
                    System.out.println("Game not finished");
                    break;
            }
        }

        static class Move {

            private final int row;
            private final int col;

            Move(int row, int col) {
                this.row = row;
                this.col = col;
            }

            public int getRow() {
                return row;
            }

            public int getCol() {
                return col;
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/81/stages/451/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 09 Apr 2021 19:14:17 UTC
record: -1
